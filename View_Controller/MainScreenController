package View_Controller;

import Model.InHouse;
import Model.Inventory;
import Model.Part;
import Model.Product;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;

import static Model.Inventory.*;

public class MainScreenController<sp> implements Initializable {

    public TableColumn PartIDCol;
    public TableColumn PartNameCol;
    public TableColumn PartInvCol;
    public TableColumn PartPriceCol;

    public TableColumn ProductsIDCol;
    public TableColumn ProductsNameCol;
    public TableColumn ProductsInvCol;
    public TableColumn ProductsPriceCol;

    public Button SearchParts;
    public Button AddParts;
    public Button ModifyParts;
    public Button DeleteParts;

    public Button SearchProducts;
    public Button AddProducts;
    public Button ModifyProducts;
    public Button DeleteProducts;
    public Button ExitButton;

    public TextField SearchProductsText;
    public TextField SearchPartsText;

    public TableView<Part> PartsTable;
    public TableView<Product> ProductsTable;

    private final ObservableList<Part> allParts = FXCollections.observableArrayList();
    private final ObservableList<Product> allProducts = FXCollections.observableArrayList();


    public void OnAddPart(ActionEvent event) throws IOException {

        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Object scene = FXMLLoader.load(getClass().getResource("/View_Controller/AddPart.fxml"));
        stage.setScene(new Scene((Parent) scene));
        stage.show();
    }

    public void OnModifyPart(ActionEvent event) throws IOException {

        Part part = (Part) PartsTable.getSelectionModel().getSelectedItem();
        if (part == null)
            return;

        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/View_Controller/ModifyPart.fxml"));
        loader.load();

        ModifyPartController PartController = loader.getController();
        PartController.setPart(part);

        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Parent scene = loader.getRoot();
        stage.setScene(new Scene(scene));
        stage.show();
    }


    public void OnDeletePart(ActionEvent event) throws IOException {

        Part part = (Part) PartsTable.getSelectionModel().getSelectedItem();
        if (part == null)
            return;

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Delete Part Confirmation");
        alert.setHeaderText("Selected Part will be deleted");
        alert.setContentText("Would you like to delete this part?");

        Optional<ButtonType> result = alert.showAndWait();
        if (((Optional) result).get() == ButtonType.OK) {
            deletePart(part.getId());
        }
    }

    public void OnPartsSearch(ActionEvent event) throws IOException {

        String pText = SearchPartsText.getText();
        ObservableList<Part> sp = Inventory.lookupPart(pText);

        //check part id
        if (sp.isEmpty()) {
            try {
                int id = Integer.parseInt(pText);
                Part search = Inventory.lookupPart(id);

                if (search != null) {
                    sp.add(search);
                }
            } catch (NumberFormatException e) {
                System.out.println("Try to convert to ID");
            }
        }
        PartsTable.setItems(sp);
}

    public void OnAddProducts(ActionEvent event) throws IOException {

        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Object scene = FXMLLoader.load(getClass().getResource("/View_Controller/AddProduct.fxml"));
        stage.setScene(new Scene((Parent) scene));
        stage.show();
    }

    public void OnModifyProducts(ActionEvent event) throws IOException {

        Product product = (Product) ProductsTable.getSelectionModel().getSelectedItem();
        if (product == null)
            return;

        FXMLLoader loader = new FXMLLoader();
        loader.setLocation(getClass().getResource("/View_Controller/ModifyProduct.fxml"));
        loader.load();

        ModifyProductController ProductController = loader.getController();
        ProductController.setProduct(product);

        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Parent scene = loader.getRoot();
        stage.setScene(new Scene(scene));
        stage.show();
    }

    public void OnDeleteProducts(ActionEvent event) {

        Product product = (Product) ProductsTable.getSelectionModel().getSelectedItem();
        if (product == null)
            return;

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Delete Product Confirmation");
        alert.setHeaderText("Selected Product will be deleted");
        alert.setContentText("Would you like to delete this product?");

        Optional<ButtonType> result = alert.showAndWait();
        if (((Optional) result).get() == ButtonType.OK) {
            deleteProduct(product.getId());
        }
    }

    public void OnProductsSearch(ActionEvent event) throws IOException {

        String pdText = SearchProductsText.getText();
        ObservableList<Product> sd = Inventory.lookupProduct(pdText);

        //check product id
        if (sd.isEmpty()) {
            try {
                int id = Integer.parseInt(pdText);
                Product search = Inventory.lookupProduct(id);

                if (search != null) {
                    sd.add(search);
                }
            } catch (NumberFormatException e) {
                System.out.println("Try to convert to ID");
            }
        }
        ProductsTable.setItems(sd);
    }

    public void OnExitButton(ActionEvent event) {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Exit Confirmation");
        alert.setHeaderText("You are now exiting the program.");
        alert.setContentText("Would you like to exit the program?");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.get() == ButtonType.OK) {
            System.exit(0);
        }


    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        PartsTable.setItems(Inventory.getAllParts()); //PartsTable will view getAllParts list from Inventory
        ProductsTable.setItems(Inventory.getAllProducts()); //ProductsTable will view getAllProducts list from Inventory

        PartIDCol.setCellValueFactory(new PropertyValueFactory<>("id"));
        PartNameCol.setCellValueFactory(new PropertyValueFactory<>("Name"));
        PartInvCol.setCellValueFactory(new PropertyValueFactory<>("stock"));
        PartPriceCol.setCellValueFactory(new PropertyValueFactory<>("Price"));

        ProductsIDCol.setCellValueFactory(new PropertyValueFactory<>("id"));
        ProductsNameCol.setCellValueFactory(new PropertyValueFactory<>("Name"));
        ProductsInvCol.setCellValueFactory(new PropertyValueFactory<>("stock"));
        ProductsPriceCol.setCellValueFactory(new PropertyValueFactory<>("Price"));



    }
}

