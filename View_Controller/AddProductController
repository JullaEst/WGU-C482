

package View_Controller;

import Model.Inventory;
import Model.Part;
import Model.Product;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class AddProductController implements Initializable {

    public Label AddProductTable;
    public Button SearchProduct;
    public TableColumn IDCol;
    public TableColumn NameCol;
    public TableColumn InvCol;
    public TableColumn PriceCol;

    public TableColumn ID2Col;
    public TableColumn Name2Col;
    public TableColumn Price2Col;
    public TableColumn Inv2Col;

    //text fields
    @FXML
    private TextField AddProductID;
    @FXML
    private TextField AddProductName;
    @FXML
    private TextField AddProductMin;
    @FXML
    private TextField AddProductInventory;
    @FXML
    private TextField AddProductPrice;
    @FXML
    private TextField AddProductMax;
    @FXML
    private TextField SearchText;

    //table columns
    @FXML
    private TableColumn<Part, Integer> IDCol1;
    @FXML
    private TableColumn<Part, String> NameCol1;
    @FXML
    private TableColumn<Part, Integer> InvCol1;
    @FXML
    private TableColumn<Part, Double> PriceCol1;

    @FXML
    private TableColumn<Part, Integer> IDCol2;
    @FXML
    private TableColumn<Part, String> NameCol2;
    @FXML
    private TableColumn<Part, Double> PriceCol2;
    @FXML
    private TableColumn<Part, Integer> InvCol2;

    //buttons
    @FXML
    private Button SaveProduct;
    @FXML
    private Button CancelProduct;
    @FXML
    private Button AddProductSearch;
    @FXML
    private Button AddProduct;
    @FXML
    private Button DeleteProduct;

    //table views
    @FXML
    private TableView<Part> partSearchTable;
    @FXML
    private TableView<Part> APTable1;
    @FXML
    private TableView<Part> APTable2;

    Part part;
    Product newProduct;
    Inventory list = new Inventory();

    ObservableList<Part> partAll = FXCollections.observableArrayList();
    ObservableList<Part> partSelected = FXCollections.observableArrayList();
    ObservableList<Part> partProduct = FXCollections.observableArrayList();


    public void OnCancelProduct(ActionEvent event) throws IOException {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to cancel your changes?",
                ButtonType.OK,
                ButtonType.CANCEL);

        alert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.OK) {
                Parent partPage = null;

                try {
                    partPage = FXMLLoader.load(getClass().getResource("/View_Controller/MainScreen.fxml"));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                Scene partScene = new Scene(partPage);

                Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();

                window.setScene(partScene);
                window.show();

            }

        });

    }

    public void OnSaveProduct(ActionEvent event) throws IOException {

        int id = Product.getNextID();
        String name = AddProductName.getText();
        int inv = Integer.parseInt(AddProductInventory.getText());
        double price = Double.parseDouble(AddProductPrice.getText());
        int min = Integer.parseInt(AddProductMin.getText());
        int max = Integer.parseInt(AddProductMax.getText());

        if (min > max) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Value is invalid.");
            alert.setContentText("Inventory must be between Minimum and Maximum value.");
            alert.showAndWait();

        } else {
            Product newProduct = new Product(id, name, inv, price, min, max);
            Inventory.addProduct(newProduct);

            /*ObservableList<Part> productPartList = newProduct.getAllAssociatedParts(); //got list of parts from product
            productPartList.addAll(partSelected); //added all partSelected to productPartList
            (breakdown of next line)
            */
            newProduct.getAllAssociatedParts().addAll(partSelected); //take all parts in APTable2

            Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            Parent scene = FXMLLoader.load(getClass().getResource("/View_Controller/MainScreen.fxml"));
            stage.setScene(new Scene(scene));
            stage.show();
        }
    }

    public void AddProductSearch(ActionEvent event) throws IOException {

        String pdText = SearchText.getText();
        ObservableList<Part> st = Inventory.lookupPart(pdText);

        //check product id
        if (st.isEmpty()) {
            try {
                int id = Integer.parseInt(pdText);
                Part search = Inventory.lookupPart(id);

                if (search != null) {
                    st.add(search);
                }
            } catch (NumberFormatException e) {
                System.out.println("Try to convert to ID");
            }
        }
        APTable1.setItems(st);
    }

    public void OnAddProduct(ActionEvent event) throws IOException {

        Part part = APTable1.getSelectionModel().getSelectedItem();

        if (part == null)
            return;

        partSelected.add(part);


    }

    public void OnDeleteProduct(ActionEvent event) {

        Part part = APTable2.getSelectionModel().getSelectedItem();

        if (part == null)
            return;


        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to delete this part?",
                ButtonType.OK,
                ButtonType.CANCEL);

        alert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.OK) {

                partSelected.remove(part);

            }
        });
    }


    @Override
    public void initialize(URL location, ResourceBundle resources) {

        IDCol1.setCellValueFactory(new PropertyValueFactory<>("id"));
        NameCol1.setCellValueFactory(new PropertyValueFactory<>("name"));
        InvCol1.setCellValueFactory(new PropertyValueFactory<>("stock"));
        PriceCol1.setCellValueFactory(new PropertyValueFactory<>("price"));

        APTable1.setItems(Inventory.getAllParts());

        IDCol2.setCellValueFactory(new PropertyValueFactory<>("id"));
        NameCol2.setCellValueFactory(new PropertyValueFactory<>("name"));
        InvCol2.setCellValueFactory(new PropertyValueFactory<>("stock"));
        PriceCol2.setCellValueFactory(new PropertyValueFactory<>("price"));

        APTable2.setItems(partSelected);


    }


    public void AddProductSearchText(ActionEvent event) {
    }

    public void setProduct(Product productSelected) {
        AddProductID.setText(Integer.toString(productSelected.getId())); //convert int to string
        AddProductName.setText(productSelected.getName());
        AddProductMin.setText(Integer.toString(productSelected.getMin()));
        AddProductInventory.setText(Integer.toString(productSelected.getStock()));
        AddProductPrice.setText(Double.toString(productSelected.getPrice()));
        AddProductMax.setText(Integer.toString(productSelected.getMax()));

    }


}

