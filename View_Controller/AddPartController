package View_Controller;


import Model.InHouse;
import Model.Inventory;
import Model.OutSourced;
import Model.Part;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.net.URL;
import java.util.ResourceBundle;

public class AddPartController implements Initializable {


    @FXML private Label AddPartCoNm;
    @FXML private Label AddPartTable;

    @FXML private RadioButton AddPartInHouse;
    @FXML private RadioButton AddPartOutsourced;
    @FXML private ToggleGroup InHouseTG;

    @FXML private TextField AddPartID;
    @FXML private TextField AddPartName;
    @FXML private TextField AddPartMin;
    @FXML private TextField PartAddInventory;
    @FXML private TextField AddPartPrice;
    @FXML private TextField AddPartMax;
    @FXML private TextField CompanyName;

    @FXML private Button SaveButton;
    @FXML private Button CancelButton;

    Parent scene;
    Stage stage;

public static void getScene(){

}

    public void OnCancelButton(ActionEvent event) throws IOException {

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Do you want to ignore your changes?",
                ButtonType.OK,
                ButtonType.CANCEL);

        alert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.OK) {
                Parent partPage = null;

                try {
                    partPage = FXMLLoader.load(getClass().getResource("/View_Controller/MainScreen.fxml"));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                Scene partScene = new Scene(partPage);

                Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();

                window.setScene(partScene);
                window.show();

            }


        });
    }

    //lambda: line 71
    public void doresponse(ButtonType response, ActionEvent event) {
        if (response == ButtonType.OK) {
            Parent partPage = null;

            try {
                partPage = FXMLLoader.load(getClass().getResource("MainScreen.fxml"));
            } catch (IOException e) {
                e.printStackTrace();
            }

            Scene partScene = new Scene(partPage);

            Stage window = (Stage) ((Node) event.getSource()).getScene().getWindow();

            window.setScene(partScene);
            window.show();

        }


    }

    public void OnSaveButton(ActionEvent event) throws IOException {

        int min = Integer.parseInt(AddPartMin.getText());
        int max = Integer.parseInt(AddPartMax.getText());

        if (min > max) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Value is invalid.");
            alert.setHeaderText("Minimum value can not be greater than maximum value.");
            alert.showAndWait();

            return; }

        if (AddPartInHouse.isSelected() && Integer.parseInt(PartAddInventory.getText()) >= Integer.parseInt(AddPartMin.getText()) && Integer.parseInt(PartAddInventory.getText()) <= Integer.parseInt(AddPartMax.getText())) {
            saveInHouse();

            stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            scene = FXMLLoader.load(getClass().getResource("/View_Controller/MainScreen.fxml"));
            stage.setScene(new Scene(scene));
            stage.show();
        } else if (AddPartOutsourced.isSelected() && Integer.parseInt(PartAddInventory.getText()) >= Integer.parseInt(AddPartMin.getText()) && Integer.parseInt(PartAddInventory.getText()) <= Integer.parseInt(AddPartMax.getText())) {
            saveOutSourced();

            stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            scene = FXMLLoader.load(getClass().getResource("/View_Controller/MainScreen.fxml"));
            stage.setScene(new Scene(scene));
            stage.show();

        } else {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Value is invalid.");
            alert.setContentText("Inventory must be between Minimum and Maximum value.");
            alert.showAndWait();
        }
    }

    public void saveInHouse() {
        int id = Part.getNextPartId();
        String name = AddPartName.getText();
        int inv = Integer.parseInt(PartAddInventory.getText());
        Double price = Double.parseDouble(PartAddInventory.getText());
        int max = Integer.parseInt(AddPartMax.getText());
        int min = Integer.parseInt(AddPartMin.getText());
        int machineId = Integer.parseInt(CompanyName.getText());

        Inventory.addPart(new InHouse(id, name, inv, price, min, max, machineId));


    }

    private void saveOutSourced() {
        int id = Part.getNextPartId();
        String name = AddPartName.getText();
        int inv = Integer.parseInt(PartAddInventory.getText());
        Double price = Double.parseDouble(PartAddInventory.getText());
        int max = Integer.parseInt(AddPartMax.getText());
        int min = Integer.parseInt(AddPartMin.getText());
        String companyNm = (CompanyName.getText());

        Inventory.addPart(new OutSourced(id, name, inv, price, min, max, companyNm));

    }

    public void createNewPart() {
        if (AddPartInHouse.isSelected()) {
            Part newPart = new InHouse(Part.getNextPartId(),
                    AddPartName.getText(),
                    Integer.parseInt(PartAddInventory.getText()),
                    Double.parseDouble(AddPartPrice.getText()),
                    Integer.parseInt(AddPartMin.getText()),
                    Integer.parseInt(AddPartMax.getText()),
                    Integer.parseInt(CompanyName.getText())); //create int from string

            Inventory.addPart(newPart);
        } else if (AddPartOutsourced.isSelected()) {
            Part newPart = new OutSourced(Part.getNextPartId(),
                    AddPartName.getText(),
                    Integer.parseInt(PartAddInventory.getText()),
                    Double.parseDouble(AddPartPrice.getText()),
                    Integer.parseInt(AddPartMin.getText()),
                    Integer.parseInt(AddPartMax.getText()),
                    CompanyName.getText()); //string, only get text

            Inventory.addPart(newPart);
        }
    }

    public void OnAddPartInHouse(ActionEvent event) {
        AddPartCoNm.setText("Machine Id");
        CompanyName.setPromptText("Machine Id");
    }

    public void OnAddPartOutsourced(ActionEvent event) {
        AddPartCoNm.setText("Company Name");
        CompanyName.setPromptText("Company Name");
    }
    //Initializes the controller class.

    @Override
    public void initialize(URL url, ResourceBundle rb) {


    }
    public void setPart(Part partSelected) {
        AddPartID.setText(Integer.toString(partSelected.getId())); //convert int to string
        AddPartName.setText(partSelected.getName());
        AddPartMin.setText(Integer.toString(partSelected.getMin()));
        PartAddInventory.setText(Integer.toString(partSelected.getStock()));
        AddPartPrice.setText(Double.toString(partSelected.getPrice()));
        AddPartMax.setText(Integer.toString(partSelected.getMax()));


        if (partSelected instanceof InHouse) {
            AddPartInHouse.setSelected(true);
        } else {
            if (partSelected instanceof OutSourced) {
                AddPartOutsourced.setSelected(true);
                OutSourced os = (OutSourced) partSelected; //cast changed type of partSelected
                CompanyName.setText(os.getCompanyName());
            }

        }
    }
}
